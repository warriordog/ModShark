// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SharkeyDB;

#nullable disable

namespace SharkeyDB.Migrations
{
    [DbContext(typeof(SharkeyContext))]
    [Migration("20240714032216_FixFlagTableRelations")]
    partial class FixFlagTableRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharkeyDB.Entities.AbuseUserReport", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("id");

                    b.Property<string>("AssigneeId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("assigneeId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("comment");

                    b.Property<string>("ReporterHost")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("reporterHost");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("reporterId");

                    b.Property<string>("TargetUserHost")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("targetUserHost");

                    b.Property<string>("TargetUserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("targetUserId");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("abuse_user_report", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("SharkeyDB.Entities.Instance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("id");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("host");

                    b.Property<string>("SuspensionState")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("suspensionState");

                    b.HasKey("Id");

                    b.ToTable("instance", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSFlaggedInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FlaggedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("flagged_at");

                    b.Property<string>("InstanceId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("instance_id");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId")
                        .IsUnique();

                    b.ToTable("ms_flagged_instance");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSFlaggedNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FlaggedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("flagged_at");

                    b.Property<string>("NoteId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("note_id");

                    b.HasKey("Id");

                    b.HasIndex("NoteId")
                        .IsUnique();

                    b.ToTable("ms_flagged_note");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSFlaggedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FlaggedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("flagged_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ms_flagged_user");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InstanceId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("instance_id");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId")
                        .IsUnique();

                    b.ToTable("ms_queued_instance");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NoteId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("note_id");

                    b.HasKey("Id");

                    b.HasIndex("NoteId")
                        .IsUnique();

                    b.ToTable("ms_queued_note");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ms_queued_user");
                });

            modelBuilder.Entity("SharkeyDB.Entities.Meta", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("id");

                    b.Property<string[]>("BlockedHosts")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("text[]")
                        .HasColumnName("blockedHosts");

                    b.Property<string[]>("SilencedHosts")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("text[]")
                        .HasColumnName("silencedHosts");

                    b.HasKey("Id");

                    b.ToTable("meta", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("SharkeyDB.Entities.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("id");

                    b.Property<string>("CW")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("cw");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Url")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("url");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("userId");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("note", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("SharkeyDB.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("id");

                    b.Property<string>("Host")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("host");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsSilenced")
                        .HasColumnType("boolean")
                        .HasColumnName("isSilenced");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("boolean")
                        .HasColumnName("isSuspended");

                    b.Property<string>("Token")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("token");

                    b.Property<string>("Uri")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("uri");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("username");

                    b.Property<string>("UsernameLower")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("usernameLower");

                    b.HasKey("Id");

                    b.HasIndex("Host");

                    b.ToTable("user", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("SharkeyDB.Entities.AbuseUserReport", b =>
                {
                    b.HasOne("SharkeyDB.Entities.User", "Assignee")
                        .WithMany("ReportsAssignedTo")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("SharkeyDB.Entities.User", "Reporter")
                        .WithMany("ReportsBy")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharkeyDB.Entities.User", "TargetUser")
                        .WithMany("ReportsAgainst")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Reporter");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSFlaggedInstance", b =>
                {
                    b.HasOne("SharkeyDB.Entities.Instance", "Instance")
                        .WithOne("FlaggedInstance")
                        .HasForeignKey("SharkeyDB.Entities.MSFlaggedInstance", "InstanceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SharkeyDB.Entities.MSQueuedInstance", "QueuedInstance")
                        .WithOne("FlaggedInstance")
                        .HasForeignKey("SharkeyDB.Entities.MSFlaggedInstance", "InstanceId")
                        .HasPrincipalKey("SharkeyDB.Entities.MSQueuedInstance", "InstanceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Instance");

                    b.Navigation("QueuedInstance");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSFlaggedNote", b =>
                {
                    b.HasOne("SharkeyDB.Entities.Note", "Note")
                        .WithOne("FlaggedNote")
                        .HasForeignKey("SharkeyDB.Entities.MSFlaggedNote", "NoteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SharkeyDB.Entities.MSQueuedNote", "QueuedNote")
                        .WithOne("FlaggedNote")
                        .HasForeignKey("SharkeyDB.Entities.MSFlaggedNote", "NoteId")
                        .HasPrincipalKey("SharkeyDB.Entities.MSQueuedNote", "NoteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Note");

                    b.Navigation("QueuedNote");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSFlaggedUser", b =>
                {
                    b.HasOne("SharkeyDB.Entities.User", "User")
                        .WithOne("FlaggedUser")
                        .HasForeignKey("SharkeyDB.Entities.MSFlaggedUser", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SharkeyDB.Entities.MSQueuedUser", "QueuedUser")
                        .WithOne("FlaggedUser")
                        .HasForeignKey("SharkeyDB.Entities.MSFlaggedUser", "UserId")
                        .HasPrincipalKey("SharkeyDB.Entities.MSQueuedUser", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("QueuedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedInstance", b =>
                {
                    b.HasOne("SharkeyDB.Entities.Instance", "Instance")
                        .WithOne("QueuedInstance")
                        .HasForeignKey("SharkeyDB.Entities.MSQueuedInstance", "InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedNote", b =>
                {
                    b.HasOne("SharkeyDB.Entities.Note", "Note")
                        .WithOne("QueuedNote")
                        .HasForeignKey("SharkeyDB.Entities.MSQueuedNote", "NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedUser", b =>
                {
                    b.HasOne("SharkeyDB.Entities.User", "User")
                        .WithOne("QueuedUser")
                        .HasForeignKey("SharkeyDB.Entities.MSQueuedUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharkeyDB.Entities.Note", b =>
                {
                    b.HasOne("SharkeyDB.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharkeyDB.Entities.User", b =>
                {
                    b.HasOne("SharkeyDB.Entities.Instance", "Instance")
                        .WithMany("Users")
                        .HasForeignKey("Host")
                        .HasPrincipalKey("Host");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("SharkeyDB.Entities.Instance", b =>
                {
                    b.Navigation("FlaggedInstance");

                    b.Navigation("QueuedInstance");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedInstance", b =>
                {
                    b.Navigation("FlaggedInstance");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedNote", b =>
                {
                    b.Navigation("FlaggedNote");
                });

            modelBuilder.Entity("SharkeyDB.Entities.MSQueuedUser", b =>
                {
                    b.Navigation("FlaggedUser");
                });

            modelBuilder.Entity("SharkeyDB.Entities.Note", b =>
                {
                    b.Navigation("FlaggedNote");

                    b.Navigation("QueuedNote");
                });

            modelBuilder.Entity("SharkeyDB.Entities.User", b =>
                {
                    b.Navigation("FlaggedUser");

                    b.Navigation("Notes");

                    b.Navigation("QueuedUser");

                    b.Navigation("ReportsAgainst");

                    b.Navigation("ReportsAssignedTo");

                    b.Navigation("ReportsBy");
                });
#pragma warning restore 612, 618
        }
    }
}
